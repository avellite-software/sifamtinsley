<header class="custom-header">
  <div class="mobile-nav-panel">
    <button type="button" class="mobile-nav-close" aria-label="Close menu">
      <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor">
        <path d="M19 6.41L17.59 5 12 10.59 6.41 5 5 6.41 10.59 12 5 17.59 6.41 19 12 13.41 17.59 19 19 17.59 13.41 12z"/>
      </svg>
    </button>
    <div class="mobile-nav-content"></div>
  </div>
  <div class="mobile-nav-overlay"></div>

  <div class="header-left">
    <div class="circle-dropdown-container">
      <div class="large-red-ellipse">
        <button class="circle-dropdown-trigger">
          <span class="circle-dropdown-text">Our Brands</span>
        </button>
        <div class="circle-dropdown-content">
          <a href="#">Dropdown Link 1</a>
          <a href="#">Dropdown Link 2</a>
        </div>
      </div>
    </div>
    <a href="{{ routes.root_url }}" class="logo">
      {% if settings.logo %}
        <img src="{{ settings.logo | image_url: width: 512 }}" alt="{{ shop.name }}" width="512" height="auto">
      {% else %}
        <span>{{ shop.name }}</span>
      {% endif %}
    </a>
  </div>

  <div class="header-center" data-desktop-container="center">
    <form action="{{ routes.search_url }}" method="get" class="search-form">
      <input id="SearchBarInput" type="search" name="q" placeholder="Search..." class="search-input">
      <button type="submit" class="search-btn">Search</button>
    </form>
  </div>

  <div class="header-right" data-desktop-container="right">
    <div class="dropdown header-btn">
      <a href="#" class="dropdown-link">About</a>
      <div class="dropdown-content">
        <a href="/collections/all">About Us</a>
        <a href="/pages/about-us">Our Story</a>
      </div>
    </div>
    <div class="dropdown header-btn">
      <a href="#" class="dropdown-link">Products</a>
      <div class="dropdown-content">
        <a href="/collections/all">All Products</a>
        <a href="/collections/new">New Arrivals</a>
      </div>
    </div>
    <div class="dropdown header-btn">
      <a href="#" class="dropdown-link">Resources</a>
      <div class="dropdown-content">
        <a href="/pages/resources">Resource Center</a>
        <a href="/pages/blog">Blog</a>
      </div>
    </div>
    <div class="dropdown header-btn red-btn">
      <a href="#" class="dropdown-link">Contact Us</a>
      <div class="dropdown-content">
        <a href="/pages/contact">Contact Form</a>
        <a href="mailto:info@example.com">Email Us</a>
      </div>
    </div>
    <a href="{{ routes.cart_url }}" class="header-btn cart-btn" id="cart-icon-bubble">
      {% if cart == empty %}
        <span class="svg-wrapper">{{ 'icon-cart-empty.svg' | inline_asset_content }}</span>
      {% else %}
        <span class="svg-wrapper">{{ 'icon-cart.svg' | inline_asset_content }}</span>
      {% endif %}
      <span class="visually-hidden">{{ 'templates.cart.cart' | t }}</span>
      {%- if cart != empty -%}
        <div class="cart-count-bubble">
          {%- if cart.item_count < 100 -%}
            <span aria-hidden="true">{{ cart.item_count }}</span>
          {%- endif -%}
          <span class="visually-hidden">{{ 'sections.header.cart_count' | t: count: cart.item_count }}</span>
        </div>
      {%- endif -%}
    </a>
  </div>

  <button type="button" class="mobile-nav-toggle" aria-label="Open menu">
    <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" width="24" height="24" fill="currentColor">
      <path d="M3 6h18v2H3zm0 5h18v2H3zm0 5h18v2H3z"/>
    </svg>
  </button>
</header>

<style>
  /* --- BASE & DESKTOP STYLES --- */
  :root {
    --header-height: 96px;
  }
  .custom-header {
    display: flex;
    align-items: center;
    justify-content: space-between;
    background: #fff;
    height: var(--header-height);
    border-bottom: 1px solid #eee;
    font-family: inherit;
    position: relative;
    z-index: 100;
    padding-left: 130px;
  }
  .header-left {
    display: flex;
    align-items: center;
    gap: 32px;
  }
  .circle-dropdown-container {
    position: relative;
    width: 0;
    height: 0;
  }
  .large-red-ellipse {
    position: absolute;
    left: -260px;
    top: -155px;
    width: 250px;
    height: 250px;
    background: #c1151b;
    border-radius: 125px;
    z-index: -1;
  }
  .circle-dropdown-trigger {
    background: none;
    border: none;
    color: #fff;
    font-size: 22px;
    font-weight: bold;
    cursor: pointer;
    position: absolute;
    left: 118px;
    top: 135px;
    z-index: 2;
    width: auto;
    height: auto;
  }
  .circle-dropdown-content {
    display: none;
    position: absolute;
    left: 120px;
    top: 210px;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    min-width: 160px;
    z-index: 10;
    flex-direction: column;
    background: #c1151b;
    border: none;
    border-radius: 20px;
  }
  .large-red-ellipse:hover .circle-dropdown-content,
  .circle-dropdown-trigger:focus + .circle-dropdown-content,
  .circle-dropdown-content:hover {
    display: flex;
  }
  .circle-dropdown-content a {
    padding: 12px 20px;
    text-decoration: none;
    font-size: 15px;
    transition: background 0.2s;
    color: #fff;
  }
  .circle-dropdown-content a:hover {
    background: #a10f16;
  }
  .logo img {
    height: 56px;
    width: auto;
    display: block;
  }
  .logo span {
    font-size: 28px;
    font-weight: bold;
    color: #333;
  }
  .header-center {
    flex: 1;
    display: flex;
    justify-content: center;
  }
  .search-form {
    display: flex;
    align-items: center;
    width: 80%;
    max-width: 600px;
  }
  .search-input {
    flex: 1;
    padding: 12px 20px;
    background: #f3f3f3;
    border: none;
    border-radius: 4px 0 0 4px;
    font-size: 16px;
    color: #333;
    outline: none;
  }
  .search-btn {
    background: white;
    border: none;
    border-radius: 0 4px 4px 0;
    font-size: 16px;
    color: #c1151b;
    font-weight: 600;
    padding: 12px 24px;
    cursor: pointer;
    margin-left: -4px;
    transition: background 0.2s, color 0.2s;
  }
  .search-btn:hover {
    background: #eaeaea;
    color: #a10f16;
  }
  .header-right {
    display: flex;
    align-items: center;
    gap: 16px;
    padding-right: 24px;
  }
  .header-btn {
    position: relative;
    padding: 10px 22px;
    border-radius: 4px;
    background: none;
    color: black;
    font-weight: 500;
    text-decoration: none;
    font-size: 16px;
    transition: background 0.2s, color 0.2s;
    cursor: pointer;
    display: flex;
    align-items: center;
  }
  .header-btn:hover,
  .header-btn:focus {
    background: #c1151b;
    color: #fff;
  }
  .red-btn {
    background: #c1151b;
    color: #fff;
    border: 1px solid #c1151b;
  }
  .dropdown-link {
    color: inherit;
    text-decoration: none;
    cursor: pointer;
    font-size: 16px;
    font-weight: 900;
    background: none;
    border: none;
    padding: 0;
    display: flex;
    align-items: center;
  }
  .dropdown-content {
    display: none;
    position: absolute;
    top: 48px;
    left: 0;
    background: #fff;
    border: 1px solid #eee;
    box-shadow: 0 2px 8px rgba(0, 0, 0, 0.08);
    min-width: 140px;
    z-index: 10;
    flex-direction: column;
  }
  .dropdown:hover .dropdown-content,
  .dropdown-link:focus + .dropdown-content {
    display: flex;
  }
  .dropdown-content a {
    padding: 10px 16px;
    text-decoration: none;
    color: #333;
    font-size: 15px;
    transition: background 0.2s;
  }
  .dropdown-content a:hover {
    background: #f5f5f5;
  }
  .cart-btn {
    display: flex;
    align-items: center;
    position: relative;
    background: #fff;
    color: #c1151b;
    padding: 10px 22px;
    border-radius: 4px;
    transition: background 0.2s, color 0.2s;
  }
  .cart-btn:hover {
    background: #c1151b;
    color: #fff;
  }
  .svg-wrapper {
    width: 24px;
    height: 24px;
    display: inline-block;
    margin-right: 8px;
  }
  .cart-count-bubble {
    position: absolute;
    top: -8px;
    right: -8px;
    background: #c1151b;
    color: #fff;
    border-radius: 50%;
    width: 20px;
    height: 20px;
    font-size: 13px;
    display: flex;
    align-items: center;
    justify-content: center;
    font-weight: bold;
    border: 2px solid #fff;
  }

  /* --- MOBILE NAVIGATION STYLES (SHARED) --- */
  .mobile-nav-toggle,
  .mobile-nav-panel,
  .mobile-nav-overlay {
    display: none;
  }

  /* --- "OPEN" STATE STYLES (toggled by JS) --- */
  body.mobile-menu-open .mobile-nav-panel {
    right: 0;
  }
  body.mobile-menu-open .mobile-nav-overlay {
    display: block;
  }

  /* === BREAKPOINT 1: TABLET STYLES (1300px and below) === */
  @media screen and (max-width: 1300px) {
    .custom-header {
      padding: 0 20px;
    }
    .header-right {
      display: none;
    } /* Hide only the right-side links */
    .mobile-nav-toggle {
      display: block;
      background: none;
      border: none;
      cursor: pointer;
      padding: 5px;
    }
    .mobile-nav-panel {
      display: block;
      position: fixed;
      top: 0;
      right: -100%;
      width: 300px;
      height: 100%;
      background: #fff;
      z-index: 102;
      transition: right 0.3s ease-in-out;
      box-shadow: -5px 0 15px rgba(0, 0, 0, 0.1);
      overflow-y: auto;
    }
    .mobile-nav-close {
      position: absolute;
      top: 15px;
      right: 15px;
      background: none;
      border: none;
      cursor: pointer;
    }
    .mobile-nav-content {
      margin-top: 50px;
    }
    .mobile-nav-overlay {
      display: none;
      position: fixed;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      background: rgba(0, 0, 0, 0.5);
      z-index: 101;
    }

    /* Styles for items inside the mobile panel */
    .mobile-nav-content .header-right {
      display: flex;
      flex-direction: column;
      align-items: stretch;
      gap: 0;
      padding: 0;
    }
    .mobile-nav-content .header-btn {
      justify-content: space-between;
      border-bottom: 1px solid #eee;
      /* FIX: Added padding to main menu items */
      padding: 15px 20px;
    }
    /* FIX: Improved submenu styling */
    .mobile-nav-content .dropdown-content {
      position: static;
      display: none;
      box-shadow: none;
      border: none;
      background: #f9f9f9; /* Added subtle background */
      padding-left: 0; /* Remove old padding */
      margin: 10px 0 0;
    }
    .mobile-nav-content .dropdown-content a {
      padding: 12px 20px 12px 35px; /* Added indentation */
    }
    .mobile-nav-content .dropdown.is-open > .dropdown-content {
      display: flex;
    }

    /* FIX: Correctly style the "Contact Us" red button */
    .mobile-nav-content .red-btn {
      background: #c1151b;
      color: #fff;
      border-radius: 0;
    }
    .mobile-nav-content .red-btn:hover {
      background: #a10f16;
      color: #fff;
    }

    .mobile-nav-content .cart-btn {
      margin: 20px;
      border: 1px solid #eee;
      justify-content: center;
    }
  }

  /* === BREAKPOINT 2: MOBILE STYLES (990px and below) === */
  @media screen and (max-width: 990px) {
    .header-left {
      gap: 15px;
    }
    .large-red-ellipse {
      display: none;
    }
    .header-center {
      display: none;
    } /* Hide the search bar on small mobile */

    .mobile-nav-content .search-form {
      width: 100%;
      padding: 0 20px 20px;
      margin-bottom: 20px;
      border-bottom: 1px solid #eee;
    }
  }
</style>

{% schema %}
{
  "name": "Custom Header",
  "settings": [
    {
      "type": "image_picker",
      "id": "logo",
      "label": "Logo"
    }
  ]
}
{% endschema %}

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const header = document.querySelector('.custom-header');
    if (!header) return;

    const mobileNavToggle = header.querySelector('.mobile-nav-toggle');
    const mobileNavClose = header.querySelector('.mobile-nav-close');
    const mobileNavOverlay = header.querySelector('.mobile-nav-overlay');
    const mobileNavContent = header.querySelector('.mobile-nav-content');

    // Original containers
    const desktopCenterContainer = document.createElement('div');
    desktopCenterContainer.className = 'header-center';
    desktopCenterContainer.dataset.desktopContainer = 'center';

    const desktopRightContainer = document.createElement('div');
    desktopRightContainer.className = 'header-right';
    desktopRightContainer.dataset.desktopContainer = 'right';

    // Store original elements
    const searchFormEl = header.querySelector('.search-form');
    const rightNavEl = header.querySelector('.header-right');
    const centerNavEl = header.querySelector('.header-center');

    // Detach them initially to avoid confusion
    if (centerNavEl) centerNavEl.remove();
    if (rightNavEl) rightNavEl.remove();

    const TABLET_BREAKPOINT = 1300;
    const MOBILE_BREAKPOINT = 990;

    const toggleMenu = (isOpen) => {
      document.body.classList.toggle('mobile-menu-open', isOpen);
    };

    mobileNavToggle.addEventListener('click', () => toggleMenu(true));
    mobileNavClose.addEventListener('click', () => toggleMenu(false));
    mobileNavOverlay.addEventListener('click', () => toggleMenu(false));

    const manageNavElements = () => {
      const screenWidth = window.innerWidth;

      // --- Determine which elements should be where ---
      if (screenWidth > TABLET_BREAKPOINT) {
        // DESKTOP
        desktopCenterContainer.appendChild(searchFormEl);
        header.insertBefore(desktopCenterContainer, mobileNavToggle);
        header.insertBefore(rightNavEl, mobileNavToggle);
        toggleMenu(false);
      } else if (screenWidth > MOBILE_BREAKPOINT) {
        // TABLET
        desktopCenterContainer.appendChild(searchFormEl);
        header.insertBefore(desktopCenterContainer, mobileNavToggle);
        mobileNavContent.appendChild(rightNavEl);
      } else {
        // MOBILE
        mobileNavContent.appendChild(searchFormEl.parentNode); // move the whole .header-center div
        mobileNavContent.appendChild(rightNavEl);
      }
    };

    // --- Rewrite of the manageNavElements logic for clarity and correctness ---
    const manageNavElementsV2 = () => {
      const screenWidth = window.innerWidth;
      const navToggle = header.querySelector('.mobile-nav-toggle');

      // References to the elements that will move
      const centerContent = header.querySelector('.header-center');
      const rightContent = header.querySelector('.header-right');

      if (screenWidth > TABLET_BREAKPOINT) {
        // DESKTOP STATE
        if (!centerContent) header.insertBefore(desktopCenterContainer, navToggle);
        if (!rightContent) header.insertBefore(desktopRightContainer, navToggle);

        // Ensure content is in the right place
        if (!desktopCenterContainer.contains(searchFormEl.parentNode))
          desktopCenterContainer.appendChild(searchFormEl.parentNode);
        if (!desktopRightContainer.contains(rightNavEl)) desktopRightContainer.appendChild(rightNavEl);

        if (mobileNavContent.contains(rightNavEl)) mobileNavContent.removeChild(rightNavEl);
        if (mobileNavContent.contains(searchFormEl.parentNode)) mobileNavContent.removeChild(searchFormEl.parentNode);

        toggleMenu(false);
      } else if (screenWidth > MOBILE_BREAKPOINT) {
        // TABLET STATE
        if (!centerContent) header.insertBefore(desktopCenterContainer, navToggle);
        if (rightContent) rightContent.remove();

        if (!desktopCenterContainer.contains(searchFormEl.parentNode))
          desktopCenterContainer.appendChild(searchFormEl.parentNode);
        if (!mobileNavContent.contains(rightNavEl)) mobileNavContent.appendChild(rightNavEl);
        if (mobileNavContent.contains(searchFormEl.parentNode)) mobileNavContent.removeChild(searchFormEl.parentNode);
      } else {
        // MOBILE STATE
        if (centerContent) centerContent.remove();
        if (rightContent) rightContent.remove();

        if (!mobileNavContent.contains(searchFormEl.parentNode)) mobileNavContent.prepend(searchFormEl.parentNode);
        if (!mobileNavContent.contains(rightNavEl)) mobileNavContent.appendChild(rightNavEl);
      }
    };

    // --- Simplified and Corrected JS Logic ---
    const manageNavElementsFinal = () => {
      const screenWidth = window.innerWidth;
      const navToggle = header.querySelector('.mobile-nav-toggle');

      // These are the elements that will be moved
      const centerEl = header.querySelector('.header-center');
      const rightEl = header.querySelector('.header-right');

      if (screenWidth > TABLET_BREAKPOINT) {
        // DESKTOP
        // If elements are in the mobile nav, move them back to the header
        if (!centerEl) header.insertBefore(document.querySelector('[data-desktop-container="center"]'), navToggle);
        if (!rightEl) header.insertBefore(document.querySelector('[data-desktop-container="right"]'), navToggle);
        toggleMenu(false);
      } else if (screenWidth > MOBILE_BREAKPOINT) {
        // TABLET
        // Ensure center is in header, move right to mobile nav
        if (!centerEl) header.insertBefore(document.querySelector('[data-desktop-container="center"]'), navToggle);
        if (rightEl) mobileNavContent.appendChild(rightEl); // Move right to mobile
      } else {
        // MOBILE
        // Move both center and right to mobile nav
        if (centerEl) mobileNavContent.prepend(centerEl);
        if (rightEl) mobileNavContent.appendChild(rightEl);
      }
    };

    header.addEventListener('click', (e) => {
      const isMobile = window.innerWidth <= TABLET_BREAKPOINT; // Use tablet breakpoint for this
      const dropdownLink = e.target.closest('.dropdown-link');
      if (isMobile && dropdownLink) {
        e.preventDefault();
        const parentDropdown = dropdownLink.closest('.dropdown');
        parentDropdown.classList.toggle('is-open');
      }
    });

    // The script in the previous answer had issues with element re-creation. This is a more robust version.
    const originalCenterParent = header;
    const originalRightParent = header;
    const centerEl = header.querySelector('.header-center');
    const rightEl = header.querySelector('.header-right');
    const navToggle = header.querySelector('.mobile-nav-toggle');

    const robustManageNav = () => {
      const isTablet = window.innerWidth <= TABLET_BREAKPOINT;
      const isMobile = window.innerWidth <= MOBILE_BREAKPOINT;

      if (isMobile) {
        // Move both to mobile panel
        mobileNavContent.prepend(centerEl);
        mobileNavContent.appendChild(rightEl);
      } else if (isTablet) {
        // Move center to header, right to mobile panel
        originalCenterParent.insertBefore(centerEl, navToggle);
        mobileNavContent.appendChild(rightEl);
      } else {
        // Move both to header
        originalCenterParent.insertBefore(centerEl, navToggle);
        originalRightParent.insertBefore(rightEl, navToggle);
        toggleMenu(false); // Close menu if resizing to desktop
      }
    };

    robustManageNav();
    window.addEventListener('resize', robustManageNav);
  });
</script>
