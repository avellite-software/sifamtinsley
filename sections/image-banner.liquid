{% comment %}
  Section: Interactive Product Orbit
  - V10 - Major Feature Update:
    - Replaced PNGs with styled product cards with index.
    - Added click-to-expand functionality with animated info panel.
    - Added scrolling text marquee for metafields.
    - Added a static "glass" overlay box.
    - Removed hover effect and added click prevention on distant items.
{% endcomment %}

{%- liquid
  comment
    HOW TO ADJUST THE ORBIT:
    - orbit_center_x_multiplier: Controls the horizontal center. A smaller number (e.g., -0.5) moves the orbit's center further to the left.
    - orbit_center_y_multiplier: Controls the vertical center. A smaller number (e.g., -1.0) moves the orbit's center further up.
    - orbit_radius_x_multiplier: Controls the orbit's width. A larger number makes the path wider.
    - orbit_radius_y_multiplier: Controls the orbit's height. A larger number makes the path taller.
  endcomment
  assign orbit_center_x_multiplier = 0.2
  assign orbit_center_y_multiplier = 0.2
  assign orbit_radius_x_multiplier = 0.4
  assign orbit_radius_y_multiplier = 0.25
-%}

<style>
  .orbit-section-{{ section.id }} {
    --animation-duration: {{ section.settings.animation_duration }}s;
    position: relative;
    width: 100%;
    min-height: 700px;
    overflow: hidden;
    cursor: grab;
    user-select: none;
    background-color: #111;
    background-image: radial-gradient(circle at bottom right, #c1151b 0%, transparent 60%);
    border-bottom-right-radius: 50px;
  }
  .orbit-section-{{ section.id }}:active {
    cursor: grabbing;
  }
  .orbit-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
  }

  /* --- New Product Card Styling --- */
  .orbit-product-card {
    position: absolute;
    top: 0;
    left: 0;
    width: 450px; /* Base width */
    will-change: transform;
    transform-origin: center center;
    transition: transform 0.5s cubic-bezier(0.25, 0.8, 0.25, 1), opacity 0.4s ease;
  }
  .orbit-section--expanded .orbit-product-card:not(.is-active) {
    opacity: 0.2;
    pointer-events: none;
  }
  .orbit-product-card__inner {
    position: relative;
    width: 100%;
    aspect-ratio: 1/1;
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
    overflow: hidden;
    background-color: #fff;
  }
  .orbit-product-card__image {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
  }
  .orbit-product-card.is-unclickable {
    pointer-events: none;
  }
  .card-index {
    position: absolute;
    top: 10px;
    left: 10px;
    background-color: rgba(0,0,0,0.5);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 600;
    z-index: 2;
  }

  /* --- New Glass Overlay --- */
  .glass-overlay {
    position: absolute;
    top: 40px;
    right: 40px;
    width: 300px;
    padding: 25px;
    background-color: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 12px;
    color: #fff;
    z-index: 500;
  }
  .glass-overlay__title {
    font-size: 1.5rem;
    font-weight: 700;
    margin: 0 0 1rem;
  }
  .glass-overlay__text.rte p {
    margin: 0;
    line-height: 1.6;
    opacity: 0.9;
  }

  /* --- New Expanded View --- */
  .expanded-view {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: flex;
    align-items: center;
    justify-content: center;
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    transition: opacity 0.4s ease, visibility 0.4s ease;
    z-index: 1000;
  }
  .expanded-view.is-active {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
  }
  .expanded-view__card {
    position: absolute;
    transition: transform 0.5s cubic-bezier(0.25, 0.8, 0.25, 1);
  }
  .expanded-view__info {
    position: absolute;
    width: 600px;
    background-color: #fff;
    border-radius: 12px;
    box-shadow: 0 15px 40px rgba(0,0,0,0.2);
    padding: 30px;
    transform: translateX(100px) scale(0.9);
    opacity: 0;
    transition: transform 0.5s cubic-bezier(0.25, 0.8, 0.25, 1) 0.1s, opacity 0.4s ease 0.1s;
  }
  .expanded-view.is-active .expanded-view__info {
    transform: translateX(0) scale(1);
    opacity: 1;
  }
  .expanded-view__title {
    font-size: 2rem;
    font-weight: 700;
    margin: 0 0 1rem;
  }
  .expanded-view__scroller {
    height: 100px;
    overflow: hidden;
    position: relative;
    -webkit-mask-image: linear-gradient(to bottom, transparent, black 20%, black 80%, transparent);
    mask-image: linear-gradient(to bottom, transparent, black 20%, black 80%, transparent);
  }
  .expanded-view__scroller-content {
    animation: marquee 20s linear infinite;
    font-size: 1rem;
    line-height: 1.7;
  }
  .expanded-view__scroller-content p { margin: 0 0 1em; }
  .expanded-view__scroller-content .rte {
    font-size: 1rem;
    line-height: 1.7;
  }
  .expanded-view__button {
    display: inline-block;
    margin-top: 20px;
    padding: 12px 28px;
    background: #c1151b;
    color: #fff;
    border-radius: 4px;
    text-decoration: none;
    font-weight: 600;
  }

  @keyframes marquee {
    0%   { transform: translateY(0%); }
    100% { transform: translateY(-100%); }
  }

  /* --- Responsive --- */
  @media screen and (max-width: 990px) {
    .glass-overlay { display: none; }
  }
  @media screen and (max-width: 768px) {
    .orbit-section-{{ section.id }} { min-height: 500px; }
    .orbit-product-card { width: 250px; }
  }
</style>

<div
  class="orbit-section-{{ section.id }}"
  data-section-id="{{ section.id }}"
  data-center-x="{{ orbit_center_x_multiplier }}"
  data-center-y="{{ orbit_center_y_multiplier }}"
  data-radius-x="{{ orbit_radius_x_multiplier }}"
  data-radius-y="{{ orbit_radius_y_multiplier }}"
>
  <div class="orbit-container">
    {%- for product in section.settings.product_list -%}
      <a href="{{ product.url }}" class="orbit-product-card" data-product-index="{{ forloop.index0 }}">
        <div class="orbit-product-card__inner">
          <span class="card-index">{{ forloop.index }}/{{ forloop.length }}</span>
          {% if product.featured_image %}
            <img
              src="{{ product.featured_image | image_url: width: 450 }}"
              alt="{{ product.featured_image.alt | escape }}"
              class="orbit-product-card__image"
              loading="lazy"
              width="450"
              height="{{ 450 | divided_by: product.featured_image.aspect_ratio | round }}"
            >
          {% else %}
            <img
              src="https://placehold.co/450x450/fff/ccc?text={{ product.title | escape }}"
              alt="{{ product.title | escape }}"
              class="orbit-product-card__image"
              width="450"
              height="450"
            >
          {% endif %}
        </div>
      </a>
    {%- else -%}
      {%- for i in (1..6) -%}
        <div class="orbit-product-card is-unclickable">
          <div class="orbit-product-card__inner">
            <span class="card-index">{{ i }}/6</span>
            <img
              src="https://placehold.co/450x450/fff/ccc?text=Product+{{ i }}"
              alt="Placeholder"
              class="orbit-product-card__image"
              width="450"
              height="450"
            >
          </div>
        </div>
      {%- endfor -%}
    {%- endfor -%}
  </div>

  {%- if section.settings.glass_title != blank or section.settings.glass_text != blank -%}
    <div class="glass-overlay">
      {%- if section.settings.glass_title != blank -%}
        <h3 class="glass-overlay__title">{{ section.settings.glass_title }}</h3>
      {%- endif -%}
      {%- if section.settings.glass_text != blank -%}
        <div class="glass-overlay__text rte">{{ section.settings.glass_text }}</div>
      {%- endif -%}
    </div>
  {%- endif -%}

  <div class="expanded-view">
    <div class="expanded-view__card"></div>
    <div class="expanded-view__info">
      <h2 class="expanded-view__title"></h2>
      <div class="expanded-view__scroller">
        <div class="expanded-view__scroller-content"></div>
      </div>
      <a href="#" class="expanded-view__button">View Product</a>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const section = document.querySelector('.orbit-section-{{ section.id }}');
    if (!section) return;

    const container = section.querySelector('.orbit-container');
    const items = Array.from(container.querySelectorAll('.orbit-product-card'));
    if (items.length === 0) return;

    const expandedView = section.querySelector('.expanded-view');
    const expandedCardContainer = expandedView.querySelector('.expanded-view__card');
    const expandedInfo = expandedView.querySelector('.expanded-view__info');
    const expandedTitle = expandedView.querySelector('.expanded-view__title');
    const expandedScroller = expandedView.querySelector('.expanded-view__scroller-content');
    const expandedButton = expandedView.querySelector('.expanded-view__button');

    const productData = [
      {%- for product in section.settings.product_list -%}
        {
          title: {{ product.title | json }},
          url: {{ product.url | json }},
          short_description: {{ product.metafields.custom.short_description.value | json }},
          features: {{ product.metafields.custom.features | metafield_tag | json }}
        },
      {%- endfor -%}
    ];

    const centerXMultiplier = parseFloat(section.dataset.centerX);
    const centerYMultiplier = parseFloat(section.dataset.centerY);
    const radiusXMultiplier = parseFloat(section.dataset.radiusX);
    const radiusYMultiplier = parseFloat(section.dataset.radiusY);

    let currentAngle = 0;
    let isDragging = false;
    let startX = 0;
    let startAngle = 0;
    let animationFrameId;
    let isExpanded = false;
    const speed = 360 / ({{ section.settings.animation_duration }} * 60);

    let containerWidth, containerHeight;
    function updateDimensions() {
      containerWidth = container.offsetWidth;
      containerHeight = container.offsetHeight;
    }

    const updatePositions = () => {
      const ellipseCenterX = containerWidth * centerXMultiplier;
      const ellipseCenterY = containerHeight * centerYMultiplier;
      const ellipseRadiusX = containerWidth * radiusXMultiplier;
      const ellipseRadiusY = containerHeight * radiusYMultiplier;

      items.forEach((item, index) => {
        if (item.classList.contains('is-active')) return;

        const itemAngleOffset = (360 / items.length) * index;
        const totalAngle = (currentAngle + itemAngleOffset) % 360;
        const angleInRadians = (totalAngle * Math.PI) / 180;

        const x = ellipseCenterX + ellipseRadiusX * Math.cos(angleInRadians);
        const y = ellipseCenterY + ellipseRadiusY * Math.sin(angleInRadians);
        
        let scale = (y / containerHeight) * 2.4;
        scale = Math.max(0.1, Math.min(2.0, scale));

        item.style.transform = `translate(${x}px, ${y}px) scale(${scale})`;
        
        if (scale < 0.5) {
          item.classList.add('is-unclickable');
        } else {
          item.classList.remove('is-unclickable');
        }
      });
    };

    const animate = () => {
      if (!isDragging && !isExpanded) {
        currentAngle -= speed;
        updatePositions();
      }
      animationFrameId = requestAnimationFrame(animate);
    };

    function openExpandedView(clickedCard) {
      if (isExpanded) return;
      isExpanded = true;
      section.classList.add('orbit-section--expanded');
      clickedCard.classList.add('is-active');
      const productIndex = parseInt(clickedCard.dataset.productIndex);
      const data = productData[productIndex];

      expandedTitle.textContent = data.title;
      const scrollerContent = (data.short_description ? `<p>${data.short_description}</p>` : '') + (data.features || '');
      expandedScroller.innerHTML = scrollerContent + scrollerContent; // Duplicate content for seamless scroll
      expandedButton.href = data.url;

      expandedCardContainer.innerHTML = clickedCard.querySelector('.orbit-product-card__inner').outerHTML;
      const cardWidth = clickedCard.offsetWidth;
      
      const targetX = (containerWidth / 2) - cardWidth - 20;
      const targetY = (containerHeight / 2) - (clickedCard.offsetHeight / 2);
      
      clickedCard.style.transform = `translate(${targetX}px, ${targetY}px) scale(1)`;
      
      expandedInfo.style.left = `${targetX + cardWidth + 40}px`;
      expandedInfo.style.top = `${targetY}px`;
      
      expandedView.classList.add('is-active');
    }
    
    function closeExpandedView() {
      if (!isExpanded) return;
      isExpanded = false;
      section.classList.remove('orbit-section--expanded');
      const activeCard = section.querySelector('.orbit-product-card.is-active');
      
      expandedView.classList.remove('is-active');

      if (activeCard) {
        activeCard.classList.remove('is-active');
      }
      updatePositions(); // Recalculate positions immediately
    }

    container.addEventListener('click', (e) => {
      const clickedCard = e.target.closest('.orbit-product-card');
      if (clickedCard && !clickedCard.classList.contains('is-unclickable') && !isDragging) {
        e.preventDefault();
        openExpandedView(clickedCard);
      }
    });

    section.addEventListener('click', (e) => {
      if (isExpanded && !e.target.closest('.orbit-product-card') && !e.target.closest('.expanded-view__info')) {
        closeExpandedView();
      }
    });

    let resizeTimeout;
    const onResize = () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            updateDimensions();
            closeExpandedView();
            updatePositions();
        }, 150);
    };
    
    let hasDragged = false;
    const startDrag = (e) => {
      if (isExpanded) return;
      isDragging = true;
      hasDragged = false;
      startX = e.pageX || e.touches[0].pageX;
      startAngle = currentAngle;
      section.style.cursor = 'grabbing';
    };
    const onDrag = (e) => {
      if (isExpanded || !isDragging) return;
      e.preventDefault();
      hasDragged = true;
      const currentX = e.pageX || e.touches[0].pageX;
      const deltaX = currentX - startX;
      const angleChange = (deltaX / container.offsetWidth) * -180;
      currentAngle = startAngle + angleChange;
      updatePositions();
    };
    const stopDrag = () => {
      if (!isDragging) return;
      isDragging = false;
      section.style.cursor = 'grab';
      // Prevent click from firing after a drag
      setTimeout(() => { hasDragged = false; }, 0);
    };

    section.addEventListener('mousedown', startDrag);
    window.addEventListener('mousemove', onDrag);
    window.addEventListener('mouseup', stopDrag);
    section.addEventListener('mouseleave', stopDrag);
    section.addEventListener('touchstart', startDrag, { passive: true });
    window.addEventListener('touchmove', onDrag, { passive: false });
    window.addEventListener('touchend', stopDrag);
    window.addEventListener('resize', onResize);

    updateDimensions();
    updatePositions();
    animate();
  });
</script>

{% schema %}
{
  "name": "Interactive Orbit",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "product_list",
      "id": "product_list",
      "label": "Products to display",
      "limit": 12
    },
    {
      "type": "range",
      "id": "animation_duration",
      "min": 20,
      "max": 120,
      "step": 10,
      "unit": "s",
      "label": "Full orbit duration (longer is slower)",
      "default": 80
    },
    {
      "type": "header",
      "content": "Glass Overlay"
    },
    {
      "type": "text",
      "id": "glass_title",
      "label": "Title",
      "default": "Featured Products"
    },
    {
      "type": "richtext",
      "id": "glass_text",
      "label": "Text",
      "default": "<p>Drag to explore our latest innovations and featured items.</p>"
    }
  ],
  "presets": [
    {
      "name": "Interactive Orbit"
    }
  ]
}
{% endschema %}
