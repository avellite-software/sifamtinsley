{% comment %}
  Section: Interactive Product Orbit
  - Final Version - Layout & Z-Index Fixes
  - Fixed z-index of expanded view to appear over glass overlays.
  - Implemented a stacked vertical layout for the expanded view on mobile.
{% endcomment %}

{%- liquid
  comment
    HOW TO ADJUST THE ORBIT:
    - orbit_center_x_multiplier: Controls the horizontal center. A smaller number (e.g., -0.5) moves the orbit's center further to the left.
    - orbit_center_y_multiplier: Controls the vertical center. A smaller number (e.g., -1.0) moves the orbit's center further up.
    - orbit_radius_x_multiplier: Controls the orbit's width. A larger number makes the path wider.
    - orbit_radius_y_multiplier: Controls the orbit's height. A larger number makes the path taller.
  endcomment
  assign orbit_center_x_multiplier = 0.2
  assign orbit_center_y_multiplier = 0.2
  assign orbit_radius_x_multiplier = 0.4
  assign orbit_radius_y_multiplier = 0.25
-%}

<style>
  .orbit-section-{{ section.id }} {
    --animation-duration: {{ section.settings.animation_duration }}s;
    position: relative;
    width: 100%;
    min-height: 700px;
    overflow: hidden;
    cursor: grab;
    user-select: none;
    background-color: #111;
    background-image: radial-gradient(circle at bottom right, #c1151b 0%, transparent 60%);
    border-bottom-right-radius: 50px;
  }
  .orbit-section-{{ section.id }}:active {
    cursor: grabbing;
  }
  .orbit-container {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    z-index: 10;
    transition: z-index 0s linear 0.5s; /* Delay z-index change on close */
  }
  /* MODIFICATION: Elevate the entire orbit when a card is expanded */
  .orbit-container.is-expanded {
    z-index: 1600;
    transition-delay: 0s;
  }
  .orbit-product-card {
    position: absolute;
    top: 0;
    left: 0;
    width: 450px;
    will-change: transform, opacity;
    transform-origin: center center;
    transition: transform 0.5s cubic-bezier(0.25, 0.8, 0.25, 1), opacity 0.4s ease;
    z-index: 1;
    pointer-events: auto;
    cursor: pointer;
  }
  .orbit-section--expanded .orbit-product-card:not(.is-active) {
    opacity: 0 !important;
    pointer-events: none;
  }
  .orbit-section--expanded .orbit-product-card.is-active {
    opacity: 1 !important;
    cursor: default;
  }
  .orbit-product-card__inner {
    position: relative;
    width: 100%;
    aspect-ratio: 1/1;
    border-radius: 12px;
    box-shadow: 0 10px 25px rgba(0, 0, 0, 0.08);
    overflow: hidden;
    background-color: #fff;
  }
  .orbit-product-card__image {
    display: block;
    width: 100%;
    height: 100%;
    object-fit: cover;
    pointer-events: none;
  }
  .orbit-product-card.is-unclickable {
    pointer-events: none;
  }
  .card-index {
    position: absolute;
    top: 10px;
    left: 10px;
    background-color: rgba(0,0,0,0.5);
    color: white;
    padding: 4px 8px;
    border-radius: 4px;
    font-size: 12px;
    font-weight: 600;
    z-index: 2;
  }
  .glass-overlay {
    position: absolute;
    top: 40px;
    padding: 25px;
    background-color: rgba(255, 255, 255, 0.1);
    backdrop-filter: blur(10px);
    -webkit-backdrop-filter: blur(10px);
    border: 1px solid rgba(255, 255, 255, 0.2);
    border-radius: 12px;
    color: #fff;
    z-index: 500;
    display: flex;
    flex-direction: column;
    justify-content: center;
    height: 180px;
  }
  .glass-overlay--right { right: 40px; width: 300px; }
  .glass-overlay--left { left: 40px; width: 450px; }
  .glass-overlay__title { font-size: 1.8rem; font-weight: 700; margin: 0 0 1rem; line-height: 1.2; color: #fff; }
  .glass-overlay__text.rte p { margin: 0; line-height: 1.6; opacity: 0.9; }

  .expanded-view {
    position: absolute;
    top: 0;
    left: 0;
    width: 100%;
    height: 100%;
    display: block;
    opacity: 0;
    visibility: hidden;
    pointer-events: none;
    transition: opacity 0.4s ease, visibility 0.4s ease;
    z-index: 1500;
  }
  .expanded-view.is-active {
    opacity: 1;
    visibility: visible;
    pointer-events: auto;
  }
  .expanded-view__info {
    position: absolute;
    width: 600px;
    background-color: #fff;
    border-radius: 12px;
    box-shadow: 0 15px 40px rgba(0,0,0,0.2);
    padding: 30px;
    transform: translateX(100px) scale(0.9);
    opacity: 0;
    transition: transform 0.5s cubic-bezier(0.25, 0.8, 0.25, 1) 0.1s, opacity 0.4s ease 0.1s, left 0.5s ease;
  }
  .expanded-view.is-active .expanded-view__info {
    transform: translateX(0) scale(1);
    opacity: 1;
  }
  .expanded-view__title { font-size: 2rem; font-weight: 700; margin: 0 0 1rem; color: #1c1c1c; }
  .expanded-view__button { display: inline-block; margin-top: 20px; padding: 12px 28px; background: #c1151b; color: #fff; border-radius: 4px; text-decoration: none; font-weight: 600; }

  .carousel-container { position: relative; height: 120px; overflow: hidden; margin-bottom: 20px; }
  .carousel-content-wrapper { display: flex; height: 100%; transition: transform 0.5s ease-in-out; }
  .carousel-item { min-width: 100%; flex-shrink: 0; padding-right: 20px; box-sizing: border-box; font-size: 1rem; line-height: 1.6; color: #333; overflow-y: auto; white-space: normal; word-wrap: break-word; }
  .carousel-item p, .carousel-item li { margin-bottom: 1em; }
  .carousel-controls { display: flex; justify-content: flex-start; align-items: center; gap: 10px; margin-top: 15px; }
  .carousel-control-btn { background: #eee; border: none; border-radius: 4px; padding: 8px 12px; cursor: pointer; font-size: 0.9rem; color: #333; transition: background 0.2s; }
  .carousel-control-btn.active, .carousel-control-btn:hover { background: #c1151b; color: #fff; }

  @media screen and (max-width: 1500px) {
    .expanded-view__info {
      left: auto !important;
      right: 40px;
      width: 500px;
    }
  }
  @media screen and (max-width: 1000px) {
    .orbit-product-card { width: 250px; }
    .expanded-view__info { width: 400px; }
  }
  @media screen and (max-width: 990px) {
    .glass-overlay { display: none; }
  }
  @media screen and (max-width: 768px) {
    .orbit-section-{{ section.id }} { min-height: 500px; }
    .expanded-view__info {
      width: calc(100% - 40px); /* Full width with padding */
      left: 20px !important;
      right: 20px !important;
      top: auto !important; /* Let JS handle top position */
      transform: translateY(50px) scale(0.95); /* Animate from bottom */
      opacity: 0;
    }
    .expanded-view.is-active .expanded-view__info {
      transform: translateY(0) scale(1);
    }
  }
</style>

<div
  class="orbit-section-{{ section.id }}"
  data-section-id="{{ section.id }}"
  data-center-x="{{ orbit_center_x_multiplier }}"
  data-center-y="{{ orbit_center_y_multiplier }}"
  data-radius-x="{{ orbit_radius_x_multiplier }}"
  data-radius-y="{{ orbit_radius_y_multiplier }}"
>
  <div class="orbit-container">
    {%- for product in section.settings.product_list -%}
      <a href="{{ product.url }}" class="orbit-product-card" data-product-index="{{ forloop.index0 }}">
        <div class="orbit-product-card__inner">
          <span class="card-index">{{ forloop.index }}/{{ forloop.length }}</span>
          {% if product.featured_image %}
            <img
              src="{{ product.featured_image | image_url: width: 450 }}"
              alt="{{ product.featured_image.alt | escape }}"
              class="orbit-product-card__image"
              loading="lazy"
              width="450"
              height="{{ 450 | divided_by: product.featured_image.aspect_ratio | round }}"
            >
          {% else %}
            <img
              src="https://placehold.co/450x450/fff/ccc?text={{ product.title | escape }}"
              alt="{{ product.title | escape }}"
              class="orbit-product-card__image"
              width="450"
              height="450"
            >
          {% endif %}
        </div>
      </a>
    {%- else -%}
      {%- for i in (1..6) -%}
        <div class="orbit-product-card is-unclickable">
          <div class="orbit-product-card__inner">
            <span class="card-index">{{ i }}/6</span>
            <img
              src="https://placehold.co/450x450/fff/ccc?text=Product+{{ i }}"
              alt="Placeholder"
              class="orbit-product-card__image"
              width="450"
              height="450"
            >
          </div>
        </div>
      {%- endfor -%}
    {%- endfor -%}
  </div>

  <div class="overlays-wrapper">
    {%- if section.settings.glass_right_title != blank or section.settings.glass_right_text != blank -%}
      <div class="glass-overlay glass-overlay--right">
        {%- if section.settings.glass_right_title != blank -%}
          <h3 class="glass-overlay__title">{{ section.settings.glass_right_title }}</h3>
        {%- endif -%}
        {%- if section.settings.glass_right_text != blank -%}
          <div class="glass-overlay__text rte">{{ section.settings.glass_right_text }}</div>
        {%- endif -%}
      </div>
    {%- endif -%}
    {%- if section.settings.glass_left_title != blank or section.settings.glass_left_text != blank -%}
      <div class="glass-overlay glass-overlay--left">
        {%- if section.settings.glass_left_title != blank -%}
          <h3 class="glass-overlay__title">{{ section.settings.glass_left_title }}</h3>
        {%- endif -%}
        {%- if section.settings.glass_left_text != blank -%}
          <div class="glass-overlay__text rte">{{ section.settings.glass_left_text }}</div>
        {%- endif -%}
      </div>
    {%- endif -%}
  </div>

  <div class="expanded-view">
    <div class="expanded-view__info">
      <h2 class="expanded-view__title"></h2>
      <div class="carousel-container">
        <div class="carousel-content-wrapper"></div>
      </div>
      <div class="carousel-controls">
        <button class="carousel-control-btn" data-slide="0">Description</button>
        <button class="carousel-control-btn" data-slide="1">Features</button>
        <button class="carousel-control-btn carousel-play-pause-btn">
          <span class="icon-play" style="display: none;">▶</span>
          <span class="icon-pause">❚❚</span>
        </button>
      </div>
      <a href="#" class="expanded-view__button">View Product</a>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const section = document.querySelector('.orbit-section-{{ section.id }}');
    if (!section) return;
    const container = section.querySelector('.orbit-container');
    const items = Array.from(container.querySelectorAll('.orbit-product-card'));
    if (items.length === 0) return;
    const expandedView = section.querySelector('.expanded-view');
    const expandedInfo = expandedView.querySelector('.expanded-view__info');
    const expandedTitle = expandedView.querySelector('.expanded-view__title');
    const carouselWrapper = expandedView.querySelector('.carousel-content-wrapper');
    const carouselControls = expandedView.querySelector('.carousel-controls');
    const expandedButton = expandedView.querySelector('.expanded-view__button');
    const itemOriginalStates = new Map();
    const productData = [
      {%- for product in section.settings.product_list -%}
        {
          title: {{ product.title | json }},
          url: {{ product.url | json }},
          short_description: {{ product.metafields.custom.short_description.value | json }},
          features: {{ product.metafields.custom.features | metafield_tag | json }}
        },
      {%- endfor -%}
    ];
    const centerXMultiplier = parseFloat(section.dataset.centerX);
    const centerYMultiplier = parseFloat(section.dataset.centerY);
    const radiusXMultiplier = parseFloat(section.dataset.radiusX);
    const radiusYMultiplier = parseFloat(section.dataset.radiusY);
    let currentAngle = 0, isDragging = false, startX = 0, startAngle = 0, animationFrameId, isExpanded = false, activeCard = null;
    const speed = 360 / ({{ section.settings.animation_duration }} * 60);
    let containerWidth, containerHeight;
    
    let currentSlide = 0;
    let autoPlayInterval;
    let autoPlayPausedByUser = false;
    const AUTO_PLAY_DELAY = 10000;

    function updateDimensions() {
      containerWidth = container.offsetWidth;
      containerHeight = container.offsetHeight;
    }

    const updatePositions = () => {
      const ellipseCenterX = containerWidth * centerXMultiplier;
      const ellipseCenterY = containerHeight * centerYMultiplier;
      const ellipseRadiusX = containerWidth * radiusXMultiplier;
      const ellipseRadiusY = containerHeight * radiusYMultiplier;
      
      const minY = ellipseCenterY - ellipseRadiusY;
      const yRange = (ellipseCenterY + ellipseRadiusY) - minY;

      items.forEach((item, index) => {
        if (item === activeCard) return;
        const itemAngleOffset = (360 / items.length) * index;
        const totalAngle = (currentAngle + itemAngleOffset) % 360;
        const angleInRadians = (totalAngle * Math.PI) / 180;
        const x = ellipseCenterX + ellipseRadiusX * Math.cos(angleInRadians);
        const y = ellipseCenterY + ellipseRadiusY * Math.sin(angleInRadians);
        
        let scale = (y / containerHeight) * 2.4; 
        scale = Math.max(0.1, Math.min(2.0, scale));

        item.style.transform = `translate(${x}px, ${y}px) scale(${scale})`;
        
        if (yRange > 0) {
          const normalizedY = (y - minY) / yRange;
          const opacity = 0.3 + (normalizedY * 0.7);
          item.style.opacity = Math.max(0.3, Math.min(1.0, opacity));
        } else {
          item.style.opacity = 1;
        }

        itemOriginalStates.set(item, {transform: item.style.transform, opacity: item.style.opacity});
        
        const zIndex = 10 + Math.round(scale * 100);
        item.style.zIndex = zIndex;
        
        if (scale < 0.4) {
          item.classList.add('is-unclickable');
        } else {
          item.classList.remove('is-unclickable');
        }
      });
    };

    const animate = () => {
      if (!isDragging && !isExpanded) {
        currentAngle -= speed;
        updatePositions();
      }
      animationFrameId = requestAnimationFrame(animate);
    };

    function startAutoPlay() {
      if (carouselWrapper.children.length < 2 || autoPlayPausedByUser) return;
      stopAutoPlay();
      autoPlayInterval = setInterval(() => showCarouselSlide(currentSlide + 1), AUTO_PLAY_DELAY);
      carouselControls.querySelector('.icon-play').style.display = 'none';
      carouselControls.querySelector('.icon-pause').style.display = 'inline-block';
    }

    function stopAutoPlay() { clearInterval(autoPlayInterval); }

    function showCarouselSlide(index) {
      const slides = Array.from(carouselWrapper.children);
      if (slides.length === 0) return;
      currentSlide = (index + slides.length) % slides.length;
      carouselWrapper.style.transform = `translateX(${-currentSlide * 100}%)`;
      carouselControls.querySelectorAll('[data-slide]').forEach(btn => {
        btn.classList.toggle('active', parseInt(btn.dataset.slide) === currentSlide);
      });
    }

    function initCarousel(data) {
      carouselWrapper.innerHTML = '';
      const slides = [];
      if (data.short_description) slides.push(`<div class="carousel-item rte"><p>${data.short_description}</p></div>`);
      if (data.features) slides.push(`<div class="carousel-item rte">${data.features}</div>`);
      carouselWrapper.innerHTML = slides.join('');
      const hasMultipleSlides = slides.length > 1;
      carouselControls.style.display = hasMultipleSlides ? 'flex' : 'none';
      currentSlide = 0;
      autoPlayPausedByUser = false;
      showCarouselSlide(0);
      startAutoPlay();
    }
    
    carouselControls.addEventListener('click', (e) => {
      const targetBtn = e.target.closest('.carousel-control-btn');
      if (!targetBtn) return;
      stopAutoPlay();
      autoPlayPausedByUser = true;
      const playPauseBtn = carouselControls.querySelector('.carousel-play-pause-btn');
      playPauseBtn.querySelector('.icon-play').style.display = 'inline-block';
      playPauseBtn.querySelector('.icon-pause').style.display = 'none';
      if (targetBtn.dataset.slide) {
        showCarouselSlide(parseInt(targetBtn.dataset.slide));
      } else if (targetBtn.classList.contains('carousel-play-pause-btn')) {
        autoPlayPausedByUser = !autoPlayPausedByUser;
        if (!autoPlayPausedByUser) startAutoPlay();
      }
    });

    function openExpandedView(clickedCard) {
      if (isExpanded) return;
      isExpanded = true;
      activeCard = clickedCard;
      section.classList.add('orbit-section--expanded');
      container.classList.add('is-expanded'); // Elevate z-index of orbit
      activeCard.classList.add('is-active');
      const productIndex = parseInt(activeCard.dataset.productIndex);
      const data = productData[productIndex];
      expandedTitle.textContent = data.title;
      initCarousel(data);
      expandedButton.href = data.url;

      const cardWidth = activeCard.offsetWidth;
      const cardHeight = activeCard.offsetHeight;
      
      let targetCardX, targetCardY;

      // MODIFICATION: New responsive logic for expanded view
      if (window.innerWidth <= 768) {
        // Stacked layout for small mobile
        targetCardX = (containerWidth / 2) - (cardWidth / 2);
        targetCardY = containerHeight * 0.15;
        expandedInfo.style.top = `${targetCardY + cardHeight + 20}px`;
      } else if (window.innerWidth <= 1500) {
        // Side-by-side for tablet/small desktop
        targetCardX = 40;
        targetCardY = (containerHeight / 2) - (cardHeight / 2);
        expandedInfo.style.left = `${targetCardX + cardWidth + 40}px`;
        expandedInfo.style.top = `${targetCardY}px`;
      } else {
        // Original layout for large desktop
        targetCardX = (containerWidth / 2) - cardWidth - 20;
        targetCardY = (containerHeight / 2) - (cardHeight / 2);
        expandedInfo.style.left = `${targetCardX + cardWidth + 40}px`;
        expandedInfo.style.top = `${targetCardY}px`;
      }
      
      activeCard.style.transform = `translate(${targetCardX}px, ${targetCardY}px) scale(1)`;
      activeCard.style.zIndex = 1001;
      
      expandedView.classList.add('is-active');
    }
    
    function closeExpandedView() {
      if (!isExpanded) return;
      isExpanded = false;
      section.classList.remove('orbit-section--expanded');
      container.classList.remove('is-expanded'); // Lower z-index of orbit
      expandedView.classList.remove('is-active');
      stopAutoPlay();
      if (activeCard) {
        const originalState = itemOriginalStates.get(activeCard);
        if (originalState) {
          activeCard.style.transform = originalState.transform;
          activeCard.style.opacity = originalState.opacity;
        }
        activeCard.classList.remove('is-active');
        activeCard = null;
      }
      updatePositions();
    }
    
    container.addEventListener('click', (e) => {
      const clickedCard = e.target.closest('.orbit-product-card');
      if (clickedCard && !clickedCard.classList.contains('is-unclickable') && !isDragging && !isExpanded) {
        e.preventDefault();
        openExpandedView(clickedCard);
      }
    });
    section.addEventListener('click', (e) => {
      if (isExpanded && !e.target.closest('.orbit-product-card.is-active') && !e.target.closest('.expanded-view__info')) {
        closeExpandedView();
      }
    });
    let resizeTimeout;
    const onResize = () => {
        clearTimeout(resizeTimeout);
        resizeTimeout = setTimeout(() => {
            updateDimensions();
            closeExpandedView();
            updatePositions();
        }, 150);
    };
    let hasDragged = false;
    const startDrag = (e) => {
      if (isExpanded) return;
      isDragging = true;
      hasDragged = false;
      startX = e.pageX || e.touches[0].pageX;
      startAngle = currentAngle;
      section.style.cursor = 'grabbing';
    };
    const onDrag = (e) => {
      if (isExpanded || !isDragging) return;
      e.preventDefault();
      hasDragged = true;
      const currentX = e.pageX || e.touches[0].pageX;
      const deltaX = currentX - startX;
      const angleChange = (deltaX / container.offsetWidth) * -180;
      currentAngle = startAngle + angleChange;
      updatePositions();
    };
    const stopDrag = () => {
      if (!isDragging) return;
      isDragging = false;
      section.style.cursor = 'grab';
      setTimeout(() => { hasDragged = false; }, 0);
    };
    section.addEventListener('mousedown', startDrag);
    window.addEventListener('mousemove', onDrag);
    window.addEventListener('mouseup', stopDrag);
    section.addEventListener('mouseleave', stopDrag);
    section.addEventListener('touchstart', startDrag, { passive: true });
    window.addEventListener('touchmove', onDrag, { passive: false });
    window.addEventListener('touchend', stopDrag);
    window.addEventListener('resize', onResize);
    updateDimensions();
    updatePositions();
    animate();
  });
</script>

{% schema %}
{
  "name": "Interactive Orbit",
  "tag": "section",
  "class": "section",
  "settings": [
    {
      "type": "product_list",
      "id": "product_list",
      "label": "Products to display",
      "limit": 12
    },
    {
      "type": "range",
      "id": "animation_duration",
      "min": 20,
      "max": 120,
      "step": 10,
      "unit": "s",
      "label": "Full orbit duration (longer is slower)",
      "default": 80
    },
    {
      "type": "header",
      "content": "Right Glass Overlay"
    },
    {
      "type": "text",
      "id": "glass_right_title",
      "label": "Title",
      "default": "Featured Products"
    },
    {
      "type": "richtext",
      "id": "glass_right_text",
      "label": "Text",
      "default": "<p>Drag to explore our latest innovations and featured items.</p>"
    },
    {
      "type": "header",
      "content": "Left Glass Overlay"
    },
    {
      "type": "text",
      "id": "glass_left_title",
      "label": "Title",
      "default": "New Arrivals"
    },
    {
      "type": "richtext",
      "id": "glass_left_text",
      "label": "Text",
      "default": "<p>Discover our newest collection of cutting-edge technology.</p>"
    }
  ],
  "presets": [
    {
      "name": "Interactive Orbit"
    }
  ]
}
{% endschema %}
